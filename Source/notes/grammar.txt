statements  : NEWLINE* statement (NEWLINE+ statement)* NEWLINE*

statement	  : KEYWORD:RETURN expr?
            : KEYWORD:CONTINUE
            : KEYWORD:BREAK
            : expr

expr        : KEYWORD:VAR IDENTIFIER COLON expr
            : TYPE_IDENTIFIER IDENTIFIER (EQ|COLON) expr
            : func-def
            : comp-expr ((KEYWORD:AND|KEYWORD:OR) comp-expr)*

# Function definitions must be separated by at least one blank line
func-def    : KEYWORD:FUNC IDENTIFIER?
              LPAREN (param-def (COMMA param-def)*)? RPAREN
              (ARROW expr)
            | ((COLON|LBRACE) NEWLINE statements (KEYWORD:END|RBRACE))
            : NEWLINE NEWLINE+  # At least one blank line after function definition

comp-expr   : NOT comp-expr
            : arith-expr ((EE|LT|GT|LTE|GTE) arith-expr)*

arith-expr  : term ((PLUS|MINUS) term)*

term        : factor ((MULTIPLY|DIVIDE) factor)*

factor      : (PLUS|MINUS) factor
            : power

power       : call (POW factor)*

call        : atom (LPAREN (expr (COMMA expr)*)? RPAREN)?
            : atom (LSQUARE expr RSQUARE)?

atom        : INT|FLOAT|STRING|IDENTIFIER
            : LPAREN expr RPAREN
            : list-expr
            : if-expr
            : for-expr
            : while-expr
            : func-def

list-expr   : LSQUARE (expr (COMMA expr)*)? RSQUARE

if-expr     : KEYWORD:IF expr (COLON|LBRACE)
              (statement if-expr-b|if-expr-c?)
            | (NEWLINE statements (KEYWORD:END|RBRACE)|if-expr-b|if-expr-c)

if-expr-b   : KEYWORD:ELIF expr (COLON|LBRACE)
              (statement if-expr-b|if-expr-c?)
            | (NEWLINE statements (KEYWORD:END|RBRACE)|if-expr-b|if-expr-c)

if-expr-c   : KEYWORD:ELSE (COLON|LBRACE)
              statement
            | (NEWLINE statements (KEYWORD:END|RBRACE))

for-expr    : KEYWORD:FOR IDENTIFIER EQ expr KEYWORD:TO expr
              (KEYWORD:STEP expr)? (COLON|LBRACE)
              statement
            | (NEWLINE statements (KEYWORD:END|RBRACE))

while-expr  : KEYWORD:WHILE expr (COLON|LBRACE)
              statement
            | (NEWLINE statements (KEYWORD:END|RBRACE))

param-def   : TYPE_IDENTIFIER IDENTIFIER

TYPE_IDENTIFIER: 'int'|'float'|'string'|'list'|'function'
