{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "JCode Programming Language",
  "scopeName": "source.jcode",
  "patterns": [
    { "include": "#keywords" },
    { "include": "#constants" },
    { "include": "#types" },
    { "include": "#numbers" },
    { "include": "#strings" },
    { "include": "#comments" },
    { "include": "#functions" },
    { "include": "#assignments" },
    { "include": "#operators" },
    { "include": "#functionCalls" },
    { "include": "#brackets" },
    { "include": "#punctuation" },
    { "include": "#identifiers" }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.jcode",
          "match": "\\b(if|elif|else|for|while|then|end|func|return|continue|break|var|to|step|and|or|not|arrow)\\b"
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.language.jcode",
          "match": "\\b(null|true|false|math_pi)\\b"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "storage.type.jcode",
          "match": "\\b(int|float|string|list|function)\\b"
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.float.jcode",
          "match": "\\b\\d+\\.\\d+\\b"
        },
        {
          "name": "constant.numeric.integer.jcode",
          "match": "\\b\\d+\\b"
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.jcode",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.jcode",
          "match": "\\\\."
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.jcode",
          "begin": "//",
          "end": "$"
        },
        {
          "name": "comment.block.jcode",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "meta.function.definition.jcode",
          "match": "\\bdef\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
          "captures": {
            "1": {
              "name": "entity.name.function.jcode"
            }
          }
        }
      ]
    },
    "functionCalls": {
      "patterns": [
        {
          "name": "support.function.call.jcode",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\()"
        }
      ]
    },
    "assignments": {
      "patterns": [
        {
          "name": "meta.variable.assignment.jcode",
          "match": "\\bvar\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*(=)",
          "captures": {
            "1": {
              "name": "variable.other.assignment.jcode"
            },
            "2": {
              "name": "keyword.operator.assignment.jcode"
            }
          }
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.arithmetic.jcode",
          "match": "(\\+|\\-|\\*|\\/|\\^|%)"
        },
        {
          "name": "keyword.operator.assignment.jcode",
          "match": "(=|\\+=|\\-=|\\*=|\\/=)"
        },
        {
          "name": "keyword.operator.comparison.jcode",
          "match": "(==|!=|<=|>=|<|>)"
        },
        {
          "name": "keyword.operator.logical.jcode",
          "match": "\\b(and|or|not)\\b"
        },
        {
          "name": "keyword.operator.arrow.jcode",
          "match": "->"
        }
      ]
    },
    "brackets": {
      "patterns": [
        {
          "name": "punctuation.section.brackets.round.jcode",
          "match": "[()]"
        },
        {
          "name": "punctuation.section.brackets.square.jcode",
          "match": "[\\[\\]]"
        },
        {
          "name": "punctuation.section.brackets.curly.jcode",
          "match": "[{}]"
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "name": "punctuation.separator.jcode",
          "match": "[,:]"
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "name": "variable.other.jcode",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
      ]
    }
  }
}
